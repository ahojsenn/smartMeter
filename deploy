#!/bin/bash
#
# deployment of $1 to pi@192.168.2.42:production/. and remote execution...
#

TARGETSERVER=krukas.dyn.amicdns.de
TARGET_SSH_PORT=42022
TARGET_USER=pi


case "$#" in
  0)
    TARGETSERVER=$TARGETSERVER
		TARGET_SSH_PORT=$TARGET_SSH_PORT
    ;;
	1)
    TARGETSERVER=$1
		TARGET_SSH_PORT=$TARGET_SSH_PORT
	;;

	2)
	  TARGETSERVER=$1
		TARGET_SSH_PORT=$2
	;;
	*)
	echo "Usage: ./deploy TARGETSERVER [TARGET_SSH_PORT | default port is 22]"
	exit 1;
esac

clear
remote="ssh -p$TARGET_SSH_PORT $TARGET_USER@$TARGETSERVER"
$remote 'mocha="./node_modules/.bin/mocha"'


echo testing ssh connection
if $remote ls; [ $? -eq 255 ]
then 
  echo "SSH connection failed"
fi

echo "checking, if $TARGET_USER has sudo rights..."
$remote 'sudo echo "sudo rights are ok"'
if [ $? -ne 0 ]
then
  echo "sudo rights are not ok"
  exit 1
fi

case "$1" in

	'-clean' )
	echo "clean deploy now first removes the directory production/smartmeter on the target server...";
	$remote 'rm -rf production/smartMeter';
	;;

	'-deploy2pi' | * )
	echo "I will now try to deploy to $TARGET_USER@"$TARGETSERVER:$TARGET_SSH_PORT
	$remote 'uptime'


	# copy the files to the pi
	$remote 'mkdir -p production/smartMeter';
	rsync --exclude ".git" -R -ave 'ssh -p '$TARGET_SSH_PORT . $TARGET_USER@$TARGETSERVER:production/smartMeter/.
#	$remote 'mkdir -p public_html/smartMeter';
#	rsync -R -ave 'ssh -p '$TARGET_SSH_PORT src/main/client $TARGET_USER@$TARGETSERVER:public_html/smartMeter/.


	# the smartMeter
	echo "killing any running smartMeters"
	$remote 'sudo production/smartMeter/src/main/meter/rcdSmartMeter stop'
	# the webServer
	# kill any running server
	echo "killing the currently running server..."
	$remote 'sudo production/smartMeter/src/main/webServer/rcdSmartMeterWebServer stop'

	echo "testing with mocha..."
	echo "...and stopping on error"
	set -e
	$remote 'sudo rm -f /tmp/data/gotResults.json'
	$remote 'touch /tmp/smartMeterTestModeIsOn'
#	$remote 'cd production/smartMeter/src/; mocha --recursive'
	$remote './node_modules/.bin/mocha production/smartMeter/src/test/global'
	$remote './node_modules/.bin/mocha production/smartMeter/src/test/meter --exit'
	$remote './node_modules/.bin/mocha production/smartMeter/src/test/dataBase'
	$remote './node_modules/.bin/mocha production/smartMeter/src/test/webServer --exit'
	# and removing the /tmp/smartMeterTestModeIsOn if necessary
	$remote 'sudo rm -f /tmp/smartMeterTestModeIsOn'

	# install the server
  echo "installing the smartMeter bootstrap"
	$remote 'sudo production/smartMeter/src/main/meter/rcdSmartMeter rcinstall'
	echo "rcinstall the server bootstrap..."
	$remote ' '


	# start the smartMeter and the server
    echo "starting the smartMeter and the server..."
	$remote '(
		sudo killall node;
		cd production/smartMeter/;
		sudo src/main/meter/rcdSmartMeter start
		sudo src/main/webServer/rcdSmartMeterWebServer start
		)'

	# read the ecrontab.user file
    echo "read the crontab..."
	$remote 'crontab production/smartMeter/src/main/cronJobs/crontab.user'
	$remote 'crontab -l'


	# edit the crontab entry that limits the number of datasets...
	# 59 23 * * 0  (tail -50000 /home/pi/myMeter.log > test; mv test /home/pi/myMeter.log) > /dev/null 2&>1

	exit 0
	;;

esac

exit 0

